<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鱼戏莲叶东，鱼戏莲叶西，鱼戏莲叶南，鱼戏莲叶北</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://freehyan.github.io/"/>
  <updated>2020-03-15T10:49:34.917Z</updated>
  <id>http://freehyan.github.io/</id>
  
  <author>
    <name>假如我会写代码</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于物理的体积云（一）</title>
    <link href="http://freehyan.github.io/2020/03/14/volumetric-cloud-1/"/>
    <id>http://freehyan.github.io/2020/03/14/volumetric-cloud-1/</id>
    <published>2020-03-14T13:18:47.000Z</published>
    <updated>2020-03-15T10:49:34.917Z</updated>
    
    <content type="html"><![CDATA[<p>最近几年Siggraph论文分享中，基本都是来自Guerrilla工作室做的游戏<strong>Horizon: Zero Dawn</strong>，Andrew Schneider分别在2015和2017年分享了他们的技术方案，如何实时渲染真实感体积云？这是<a href="https://youtu.be/5i0DvM84z94" target="_blank" rel="noopener">地平线中的游戏视频</a>，实时动态云的光散射效果十分惊艳。</p><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200314215059.png" width="60%" /></p><a id="more"></a><h5 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h5><ol><li>[Quilez 13]IQ分享了基于raymarching的2D体积云。</li><li>[Simul 13]<strong>Drive Club</strong>游戏用的是TrueSky中间件，它能渲染出逼真的大气效果。</li></ol><p>以上工作存在的问题：</p><ul><li>仅仅能渲染低海拔的层云(stratus cloud),而不能渲染出蓬松的和层状的平积云（stratocumulus cloud）或积云(cumulus cloud)。</li><li>当前的体积方法不能实现特定真实的光照效果。</li><li>实时体积云性能和内存消耗大，但此消耗与渲染质量不成正比。</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Cloud_types_en.svg/600px-Cloud_types_en.svg.png" alt="https://en.wikipedia.org/wiki/List_of_cloud_types"></p><p>地平线提出的解决方案包含云建模和云光照，而性能消耗在主机平台上内存占20MB，时间消耗占2ms。</p><h5 id="云的建模"><a href="#云的建模" class="headerlink" title="云的建模"></a>云的建模</h5><h5 id="云的渲染"><a href="#云的渲染" class="headerlink" title="云的渲染"></a>云的渲染</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几年Siggraph论文分享中，基本都是来自Guerrilla工作室做的游戏&lt;strong&gt;Horizon: Zero Dawn&lt;/strong&gt;，Andrew Schneider分别在2015和2017年分享了他们的技术方案，如何实时渲染真实感体积云？这是&lt;a href=&quot;https://youtu.be/5i0DvM84z94&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地平线中的游戏视频&lt;/a&gt;，实时动态云的光散射效果十分惊艳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://q6qyzne7s.bkt.clouddn.com/blog/20200314215059.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Graphics" scheme="http://freehyan.github.io/categories/Graphics/"/>
    
    
      <category term="Volumetric Cloud" scheme="http://freehyan.github.io/tags/Volumetric-Cloud/"/>
    
      <category term="GPU Pro 7" scheme="http://freehyan.github.io/tags/GPU-Pro-7/"/>
    
  </entry>
  
  <entry>
    <title>基于物理的大气散射 (二)</title>
    <link href="http://freehyan.github.io/2020/03/08/sky-rendering-2/"/>
    <id>http://freehyan.github.io/2020/03/08/sky-rendering-2/</id>
    <published>2020-03-08T13:20:56.000Z</published>
    <updated>2020-03-14T03:00:50.048Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中，我们根据光照理论传输方程建立了大气散射的物理模型，并给出了数学公式。接下来这篇文章将解释如何求解大气散射积分，以及用代码实现大气散射效果。</p><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200310223404.png" alt="Precomputed Atmospheric Scattering"></p><a id="more"></a><p>[BN08]的论文《Precomputed Atmospheric Scattering》表示可在任意位置实时渲染大气散射效果。论文提出了预结算散射效果放入4D纹理中，在着色器中只需要查找表的消耗来得到当前散射结果，从而提高了渲染效率。</p><p>本文接下来也采用预结算的方法先保存散射方程需要的数据，但是不会采用4D查找表的方式，只用采用2D纹理保存即可。</p><h5 id="计算散射积分"><a href="#计算散射积分" class="headerlink" title="计算散射积分"></a>计算散射积分</h5><p>$L_{In} = \int_{C}^{O}L_{Sun}e^{-T(A(s)-&gt;P(s))}e^{-T(P(s)-&gt;C)} * V(P(s))(\beta_{R}^{s}e^{-h(s)/H_{R}}p_{R}(\theta)+\beta_{M}^{s}e^{-h(s)/H_{M}}p_{M}(\theta)) ds$</p><p>面对此散射积分方程，我们需要用离散的方法去近似求解积分值。首先观察散射方程中的两个光学深度$T(A-&gt;P)$和T(P-&gt;C)部分，发现光学深度其实就依赖于两个自变量。</p><pre><code>* 海拔高度* 角度：相机方向和太阳方向的夹角。</code></pre><p>两个自变量可联想到二维形式，图形学中刚好可以用纹理的U坐标表示高度，V坐标表示角度。</p><h5 id="光学深度计算"><a href="#光学深度计算" class="headerlink" title="光学深度计算"></a>光学深度计算</h5><p>$T(A-&gt;B) = \beta_{R}^{e}\int_{A}^{B}e^{-h(t)/H_{R}dt} + \beta_{M}^{e}\int_{A}^{B}e^{-h(t)/H_{M}dt}$</p><p>其中，$\beta_{R}^{e}$和$\beta_{M}^{e}$都是标量，暂时不用管。瑞利散射和米散射在P点到大气层顶部的光学深度积分可预结算出来存在二维纹理。</p><p>$T(A-&gt;P) = \beta_{R}^{e}.xyzD[h,\cos{\varphi}].x + \beta_{M}^{e}.xyzD[h,\cos{\varphi}].y $</p><h5 id="粒子密度"><a href="#粒子密度" class="headerlink" title="粒子密度"></a>粒子密度</h5><h6 id="纹理参数化"><a href="#纹理参数化" class="headerlink" title="纹理参数化"></a>纹理参数化</h6><p>先考虑UV坐标的数值在[0,1]区间。怎么表示任意高度和任意方向。</p><ol><li>任意高度：真实世界的大气高度数值为80000.0f，单位是米。换个思路，用V坐标做插值因子。</li><li>任意方向：想象一个圆，任意方向可为单位圆上的一点，因此任意方向可表示为$\cos{varphi}$和$\sin{varphi}$。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> cosAngle = input.uv.x * <span class="number">2.0</span> - <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">float</span> sinAngle = <span class="built_in">sqrt</span>(saturate(<span class="number">1</span> - cosAngle * cosAngle));</span><br><span class="line"><span class="keyword">float</span> startHeight = lerp(<span class="number">0.0</span>, _AtmosphereHeight, input.uv.y);</span><br></pre></td></tr></table></figure><h6 id="求解交点"><a href="#求解交点" class="headerlink" title="求解交点"></a>求解交点</h6><p>刚刚说到我们先计算视线某一点到大气顶端的积分值，但是如何确定终点，即视线与大气层的交点。地球是球体，视线可表示为射线，那么数学上转换就是如何求解<a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection" target="_blank" rel="noopener">直线与球体的交点</a>？</p><p>其实也就是初中数学知识，代入法求根运算即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">float2 <span class="title">RaySphereIntersection</span><span class="params">(float3 rayOrigin, float3 rayDir, float3 sphereCenter, <span class="keyword">float</span> sphereRadius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rayOrigin -= sphereCenter;</span><br><span class="line">    <span class="keyword">float</span> a = dot(rayDir, rayDir);</span><br><span class="line">    <span class="keyword">float</span> b = <span class="number">2.0</span> * dot(rayOrigin, rayDir);</span><br><span class="line">    <span class="keyword">float</span> c = dot(rayOrigin, rayOrigin) - (sphereRadius * sphereRadius);</span><br><span class="line">    <span class="keyword">float</span> d = b * b - <span class="number">4</span> * a * c;</span><br><span class="line">    <span class="keyword">if</span> (d &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        d = <span class="built_in">sqrt</span>(d);</span><br><span class="line">        <span class="keyword">return</span> float2(-b - d, -b + d) / (<span class="number">2</span> * a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="密度积分"><a href="#密度积分" class="headerlink" title="密度积分"></a>密度积分</h6><p>大气层中的粒子密度不是一层不变，而是随着海波高度的升高，近似呈现为指数衰减。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius + _AtmosphereHeight);</span><br><span class="line">   float3 rayEnd = rayStart + rayDir * intersection.y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compute density along the ray</span></span><br><span class="line">   float3 <span class="built_in">step</span> = (rayEnd - rayStart) / stepCount;</span><br><span class="line">   <span class="keyword">float</span> stepSize = length(<span class="built_in">step</span>);</span><br><span class="line">   float2 density = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">float</span> s = <span class="number">0.5</span>; s &lt; stepCount; s += <span class="number">1.0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       float3 <span class="built_in">position</span> = rayStart + <span class="built_in">step</span> * s;</span><br><span class="line">       <span class="keyword">float</span> <span class="built_in">height</span> = <span class="built_in">abs</span>(length(<span class="built_in">position</span> - planetCenter) - _PlanetRadius);</span><br><span class="line">       float2 localDensity = <span class="built_in">exp</span>(-(<span class="built_in">height</span>.xx / _DensityScaleHeight));</span><br><span class="line"></span><br><span class="line">       density += localDensity * stepSize;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="大气渲染"><a href="#大气渲染" class="headerlink" title="大气渲染"></a>大气渲染</h5><p>因为相机的方向角度，以及太阳的方向都可能实时发生变化，接下来就是如何通过预计算得到的纹理实时渲染出基于物理的大气散射效果。</p><h5 id="获取当前点的密度值"><a href="#获取当前点的密度值" class="headerlink" title="获取当前点的密度值"></a>获取当前点的密度值</h5><p>上一部分以及得到预计算的密度积分纹理图，只需要通过输入当前点的信息即可得到结果。其中返回结果的x分量是瑞利散射密度积分值，y分量是米散射积分值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入：_ParticleDensityLUT，[lightZenith, heigh]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetAtmosphereDensity</span><span class="params">(float3 <span class="built_in">position</span>, float3 planetCenter, float3 lightDir, out float2 localDensity, out float2 densityToAtmTop)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> <span class="built_in">height</span> = length(<span class="built_in">position</span> - planetCenter) - _PlanetRadius;</span><br><span class="line">    localDensity = <span class="built_in">exp</span>(-<span class="built_in">height</span>.xx / _DensityScaleHeight.xy);  <span class="comment">//当前高度的密度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> cosAngle = dot(normalize(<span class="built_in">position</span> - planetCenter), -lightDir.xyz);</span><br><span class="line"></span><br><span class="line">    densityToAtmTop = tex2D(_ParticleDensityLUT, float2(cosAngle * <span class="number">0.5</span> + <span class="number">0.5</span>, (<span class="built_in">height</span> / _AtmosphereHeight))).rg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="计算当前点的内散射"><a href="#计算当前点的内散射" class="headerlink" title="计算当前点的内散射"></a>计算当前点的内散射</h5><p>天空的大气散射除了$T_{CP}$和$T_{AP}$的衰减函数，我们还需要求解当前点的内散射函数。其中与散射系数，密度函数，以及相位函数有关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void ComputeLocalInscattering(float2 localDensity, float2 densityPA, float2 densityCP, out float3 localInscatterR, out float3 localInscatterM)</span><br><span class="line">&#123;</span><br><span class="line">    float2 densityCPA &#x3D; densityCP + densityPA;</span><br><span class="line"></span><br><span class="line">    float3 Tr &#x3D; densityCPA.x * _ExtinctionR; &#x2F;&#x2F;计算瑞利和米散射粒子的光学深度</span><br><span class="line">    float3 Tm &#x3D; densityCPA.y * _ExtinctionM;</span><br><span class="line"></span><br><span class="line">    float3 extinction &#x3D; exp(-(Tr + Tm));    &#x2F;&#x2F;当前积分点的消光值</span><br><span class="line"></span><br><span class="line">    localInscatterR &#x3D; localDensity.x * extinction;</span><br><span class="line">    localInscatterM &#x3D; localDensity.y * extinction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相位函数简单易懂，与波长有关的瑞利散射相位函数，近似均匀向四周发散；与波长无关的米散射相位函数，大概率朝向光源行径方向散射。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// ApplyPhaseFunction[EG2008]</span></span><br><span class="line"><span class="comment">// 瑞利散射和米散射的相位函数</span></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ApplyPhaseFunction</span><span class="params">(inout float3 scatterR, inout float3 scatterM, <span class="keyword">float</span> cosAngle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// r</span></span><br><span class="line">    <span class="keyword">float</span> phase = (<span class="number">3.0</span> / (<span class="number">16.0</span> * PI)) * (<span class="number">1</span> + (cosAngle * cosAngle));</span><br><span class="line">    scatterR *= phase;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m</span></span><br><span class="line">    <span class="keyword">float</span> g = _MieG;</span><br><span class="line">    <span class="keyword">float</span> g2 = g * g;</span><br><span class="line">    phase = (<span class="number">1.0</span> / (<span class="number">4.0</span> * PI)) * ((<span class="number">3.0</span> * (<span class="number">1.0</span> - g2)) / (<span class="number">2.0</span> * (<span class="number">2.0</span> + g2))) * ((<span class="number">1</span> + cosAngle * cosAngle) / (<span class="built_in">pow</span>((<span class="number">1</span> + g2 - <span class="number">2</span> * g * cosAngle), <span class="number">3.0</span> / <span class="number">2.0</span>)));</span><br><span class="line">    scatterM *= phase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="渲染结果"><a href="#渲染结果" class="headerlink" title="渲染结果"></a>渲染结果</h5><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200311232302.png" alt="相机高度5600米"><br><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200311231855.png" alt="夕阳"></p><p>基于物理的太空颜色就是大气层的内散射积分和，求得内散射结果也就是我们的天空背景。而我们的视线路径上的光学深度衰减是密度函数与消光系数乘积结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[loop]</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">float</span> s = <span class="number">1.0</span>; s &lt; sampleCount; s += <span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       float3 p = rayStart + <span class="built_in">step</span> * s;</span><br><span class="line"></span><br><span class="line">       GetAtmosphereDensity(p, planetCenter, lightDir, localDensity, densityPA);</span><br><span class="line">       densityCP += (localDensity + prevLocalDensity) * (stepSize / <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">       prevLocalDensity = localDensity;</span><br><span class="line"></span><br><span class="line">       float3 localInscatterR, localInscatterM;</span><br><span class="line">       ComputeLocalInscattering(localDensity, densityPA, densityCP, localInscatterR, localInscatterM);</span><br><span class="line"></span><br><span class="line">       scatterR += (localInscatterR + prevLocalInscatterR) * (stepSize / <span class="number">2.0</span>);</span><br><span class="line">       scatterM += (localInscatterM + prevLocalInscatterM) * (stepSize / <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">       prevLocalInscatterR = localInscatterR;</span><br><span class="line">       prevLocalInscatterM = localInscatterM;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   float3 lightExtinction = <span class="built_in">exp</span>(-(densityCP.x * _ExtinctionR + densityCP.y * _ExtinctionM));</span><br></pre></td></tr></table></figure><p>大气的消光系数，可用来做大气雾效果，以后的文章将会讲解。</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ol><li>GPU Pro 5: High Performance Outdoor Light Scattering Using Epipolar Sampling.</li><li>Precomputed Atmospheric Scattering</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章中，我们根据光照理论传输方程建立了大气散射的物理模型，并给出了数学公式。接下来这篇文章将解释如何求解大气散射积分，以及用代码实现大气散射效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://q6qyzne7s.bkt.clouddn.com/blog/20200310223404.png&quot; alt=&quot;Precomputed Atmospheric Scattering&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Graphics" scheme="http://freehyan.github.io/categories/Graphics/"/>
    
    
      <category term="Atmospheric Scattering" scheme="http://freehyan.github.io/tags/Atmospheric-Scattering/"/>
    
  </entry>
  
  <entry>
    <title>基于物理的大气散射 (一)</title>
    <link href="http://freehyan.github.io/2020/03/05/sky-rendering-1/"/>
    <id>http://freehyan.github.io/2020/03/05/sky-rendering-1/</id>
    <published>2020-03-05T13:20:01.000Z</published>
    <updated>2020-03-11T15:29:47.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200306090955.png" alt="Rendering Parametrizable Planetary Atmospheres with Multiple Scattering in Real-Time"></p><p>当你看到蓝天白云，日落黄昏，有没有想过这些现象产生的原因是什么？这些物理现象用一句话解释：太阳光与大气层中的参与介质发生了大气散射现象，从而形成了天空颜色。</p><a id="more"></a><h5 id="参与介质"><a href="#参与介质" class="headerlink" title="参与介质"></a>参与介质</h5><p>什么是参与介质？光的能量是由光子组成，而空气中与光子进行交互的细小的粒子就被称为参与介质。比如空气中的水分子，以及工厂排放的气溶胶粒子。</p><h5 id="光散射"><a href="#光散射" class="headerlink" title="光散射"></a>光散射</h5><p>什么是光散射现象？光源的辐射度沿着路径前行时，碰到参与介质时会发生三个不同散射现象的行为:</p><ul><li>吸收（Absobption）： 参与介质把光能量转换为其他形式的能量。</li><li>外散射（Out-Scattering）： 改变光传播方向。</li><li>内散射（In-Scattering）：进入相机方向的入射辐射度。</li></ul><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200308150248.png" width="50%" /></p><h5 id="大气物理模型"><a href="#大气物理模型" class="headerlink" title="大气物理模型"></a>大气物理模型</h5><p>如何推导出大气现象背后的物理模型，首先假设大气层只存在一次单散射现象，即视线路径上只发生一次散射。</p><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200308110143.png" width="50%" /></p><p>如图，太阳光到达大气层并没有能量损失，在$C$点的光通量为$I_{s}$。由于单散射，路径$CP$上不会发生散射，但是会有光照强度损失，P点的光强为$I_{p} = I_{s}T(\overline{CP})$。在P点的光强只有一部分能量才会转向相机，那么P点散射函数与哪些因素有关呢？</p><pre><code>* 角度：相机方向与太阳太阳的夹角。* 高度：高度不同，粒子的密度值不同。* 波长：波长较小的光分量更容易被散射。</code></pre><p>散射函数细化，可由后面文章的函数组合来表示P点的散射现象。</p><h5 id="散射系数"><a href="#散射系数" class="headerlink" title="散射系数"></a>散射系数</h5><p>散射系数与粒子的大小，折射率有关。根据粒子大小不同可分为瑞利散射系数和米散射系数。</p><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200308122322.png" width="60%" /></p><h6 id="瑞利散射系数？"><a href="#瑞利散射系数？" class="headerlink" title="瑞利散射系数？"></a>瑞利散射系数？</h6><p>因为小分子的大小远小于光线波长，这造成了光的波长会影响瑞利散射效果，因此瑞利散射是<strong>波长相关</strong>。上图左边瑞利散射几乎均匀向四面八方散射光强，这也是白天时候瑞利散射把波长较小的蓝色光向天空四面八方散射造成蓝天效果。</p><p> $ \beta_{R}(\lambda) = 8\pi^3\frac{(n^2-1)^2}{3N_{e}\lambda^4} $</p><p>其中，$n$是空气的折射率，约等于(1.0003)；$N_{e}$是海平面的空气密度,约为2.545e25；$\lambda$是入射光的波长.经过计算，瑞利散射系数可表示为$\beta_{R}^{s}.rgb = (5.8,13.5,33.1)10^{-6}m^{-1}$。</p><h6 id="米散射系数？"><a href="#米散射系数？" class="headerlink" title="米散射系数？"></a>米散射系数？</h6><p>米散射系数很难去推导计算，基于统计数据的结果，米散射系数可以常量进行估计。[BN08]论文中，米散射系数值为$\beta_{M}^{s} = (2,2,2)10^{-6}m^{-1}$。</p><h5 id="相位函数"><a href="#相位函数" class="headerlink" title="相位函数"></a>相位函数</h5><p>相位函数表示太阳光发生散射现象时转向相机方向的概率函数。</p><ol><li><p>瑞利相位函数<br>$F_{R}(\theta) = \frac{3}{4}(1+cos\theta) $</p></li><li><p>米相位函数</p></li></ol><p>米散射相位函数更加复杂，分布变化与粒子大小有关。[CS92]改善了Henyey-Greenstein函数，用来近似计算米散射相位函数。</p><p>$F_{M}(\theta, g) = \frac{3(1-g^2)}{2(2+g^2)}\frac{1+\cos^2(\theta)}{(1+g^2-2g\cos^2(\theta))^{3/2}}$</p><h5 id="密度函数"><a href="#密度函数" class="headerlink" title="密度函数"></a>密度函数</h5><p>根据散射系数和相位函数，我们可以计算海平面的散射值。但是随着海拔高度的增加，空气中的粒子密度是发生变换的，而密度函数是用来估计任意高度下粒子的密度。</p><p>$p_{R,M}(h) = exp(-\frac{h}{H_{R,M}})$</p><p>其中，h是以海平面为基准的额高度，其中瑞利和米散射海平面基准高度为$H_{R}$8000米，$H_{M}$为1200米。</p><p>太阳光通过大气层最终进入视野的只有内散射的光通量，而根据参与介质的类型不同可分为两种散射现象。水分子相关的散射为瑞利散射，气溶胶相关的为米散射。</p><h5 id="透射比函数"><a href="#透射比函数" class="headerlink" title="透射比函数"></a>透射比函数</h5><p>现在只能确定太阳光转向相机方向的光通量，除了方向还需要计算光强的衰减。计算透射函数之前先了解光学深度的概念。</p><h6 id="光学深度"><a href="#光学深度" class="headerlink" title="光学深度"></a>光学深度</h6><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200308144510.png" width="60%" /></p><p>光学深度本质是积分函数，可理解为光强经过长度路径AB后，被空气分子或粒子吸收和外散射后，损失的光通量部分。</p><p>$D(A-&gt;B) = \int_{A}^{B} (\beta_{R}^{e}e^{-h(t)/H_{R}} + \beta_{M}^{e}e^{-h(t)/H_{M}})dt $</p><p>其中，瑞利散射和米散射的光学深度是相互独立且可分别计算，其中散射系数$\beta_{R/M}^{s}$是海平面的数值，还需要被密度函数$e^{-h/H_{R/M}}$进行缩放。光学深度根据公式来看，就是瑞利散射和米散射<strong>消光系数和密度函数乘积的积分</strong>。</p><ul><li>瑞利散射消光系数: $\beta_{R}^{e} = \beta_{R}^{s}$，消光系数等于散射系数。</li><li>米散射消光系数： $\beta_{M}^{e} = \beta_{M}^{s} + \beta_{M}^{a}$，[BN08]论文中建议米散射吸收系数等于散射系数的0.1倍。</li></ul><p>透射函数的衰减非线性衰减，也是指数衰减形式，并与光学深度紧密联系。<br>$T(A-&gt;B) = exp^{-D} $</p><h5 id="散射积分"><a href="#散射积分" class="headerlink" title="散射积分"></a>散射积分</h5><p><img src="http://q6qyzne7s.bkt.clouddn.com/blog/20200307164630.png" width="50%" /></p><p>上面部分都只考虑了相机方向P点的散射，但是视线方向AB上有无数的P点，通过积分拟合把视线路径AB拆分为无数的线段距离，就可以计算出整个路径上的内散射积分和。</p><p>$L_{In} = \int_{C}^{O}L_{Sun}e^{-T(A(s)-&gt;P(s))}e^{-T(P(s)-&gt;C)} * V(P(s))(\beta_{R}^{s}e^{-h(s)/H_{R}}p_{R}(\theta)+\beta_{M}^{s}e^{-h(s)/H_{M}}p_{M}(\theta)) ds$</p><h6 id="大气透视"><a href="#大气透视" class="headerlink" title="大气透视"></a>大气透视</h6><p>当看远处的山时，发现会有一种雾蒙蒙的感觉，这是由于远山在视线的路径上发生了透射衰减，此现象也被称为大气透视。以图中O点举例，即O点入射辐射度为自身对象辐射度的衰减和内散射光的积分之和，计算公式为：</p><p>$L = L_{O}e^{-T(O-&gt;C)} + L_{In}$</p><p>大气雾的计算由此而来。</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ol><li>GPU Pro 5: High Performance Outdoor Light Scattering Using Epipolar Sampling.</li><li>Precomputed Atmospheric Scattering</li><li>Rendering Parametrizable Planetary Atmospheres with Multiple Scattering in Real-Time</li><li><a href="http://hyperphysics.phy-astr.gsu.edu/hbase/atmos/blusky.html" target="_blank" rel="noopener">Blue Sky</a></li><li><a href="https://zhuanlan.zhihu.com/p/36498679" target="_blank" rel="noopener">基于物理的大气渲染</a></li><li><a href="https://zhuanlan.zhihu.com/p/32525403" target="_blank" rel="noopener">基于体积的大气散射</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://q6qyzne7s.bkt.clouddn.com/blog/20200306090955.png&quot; alt=&quot;Rendering Parametrizable Planetary Atmospheres with Multiple Scattering in Real-Time&quot;&gt;&lt;/p&gt;
&lt;p&gt;当你看到蓝天白云，日落黄昏，有没有想过这些现象产生的原因是什么？这些物理现象用一句话解释：太阳光与大气层中的参与介质发生了大气散射现象，从而形成了天空颜色。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Graphics" scheme="http://freehyan.github.io/categories/Graphics/"/>
    
    
      <category term="Atmospheric Scattering" scheme="http://freehyan.github.io/tags/Atmospheric-Scattering/"/>
    
  </entry>
  
  <entry>
    <title>2020年读书计划</title>
    <link href="http://freehyan.github.io/2020/03/01/salted-fish-turn-over-plan-md/"/>
    <id>http://freehyan.github.io/2020/03/01/salted-fish-turn-over-plan-md/</id>
    <published>2020-03-01T13:59:37.000Z</published>
    <updated>2020-03-14T10:22:32.403Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉当中，我参加工作已经有一年半的时间（当咸鱼的时间）。虽然工作中有了很多的收获，但是课余时间都拿来玩游戏了，想想就觉得颓废。疫情之后，春暖花开，一起看书读报写代码吧，奥利给！</p><a id="more"></a><h5 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h5><ul><li>[ ] Real-Time Rendering </li><li>[ ] Physically Based Rendering, From The Theory to Implementation</li><li>[ ] 全局光照技术</li><li>[ ] 游戏引擎架构</li><li><p>[ ] 游戏设计模式</p></li><li><p>[ ] GPU Gems 1</p></li><li>[ ] GPU Gems 2</li><li><p>[ ] GPU Gems 3</p></li><li><p>[ ] GPU Pro 1</p></li><li>[ ] GPU Pro 2</li><li>[ ] GPU Pro 3</li><li>[ ] GPU Pro 4</li><li>[ ] GPU Pro 5</li><li>[ ] GPU Pro 6</li><li>[ ] GPU Pro 7</li></ul><h5 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h5><ul><li>[ ] Soft Rendering</li><li>[ ] Rendering Engine</li></ul><h5 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h5><ul><li>[ ] Unity</li><li>[ ] Unreal</li></ul><h5 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h5><ul><li>[ ] Terrain Rendering</li><li>[ ] Ocean Rendering</li><li>[ ] Physically Based Rendering, Chapter 2</li><li>[ ] Physically Based Rendering, Chapter 3</li></ul><h5 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h5><h5 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h5><h5 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h5><h5 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h5><h5 id="八月"><a href="#八月" class="headerlink" title="八月"></a>八月</h5><h5 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h5><h5 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h5><h5 id="十一月"><a href="#十一月" class="headerlink" title="十一月"></a>十一月</h5><h5 id="十二月"><a href="#十二月" class="headerlink" title="十二月"></a>十二月</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉当中，我参加工作已经有一年半的时间（当咸鱼的时间）。虽然工作中有了很多的收获，但是课余时间都拿来玩游戏了，想想就觉得颓废。疫情之后，春暖花开，一起看书读报写代码吧，奥利给！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Others" scheme="http://freehyan.github.io/tags/Others/"/>
    
  </entry>
  
</feed>
